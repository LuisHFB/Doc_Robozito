{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Robozito 2020 \u00b6 Robozito Desmont\u00e1vel V25 by LBueno on Sketchfab O robozito \u00e9 um projeto que foi criado pelo aluno Wesley Gabriel em conjunto com os t\u00e9cnicos do Insper Fablab para uma atividade da Roadsec 2019 e agora \u00e9 utilizado como atividade complementar para os alunos de 1o semestre na disciplina de Natureza do Design. O robozito apresenta a maioria das suas pe\u00e7as fabricados com m\u00e1quinas dispon\u00edveis em qualquer Fablab, como: Laser: Corpo Bra\u00e7os Impress\u00e3o 3D: Rodas Suporte dos motores Fresadora de precis\u00e3o: Placa para conex\u00e3o com ESP8266 Seu controle \u00e9 feito por um ESP8266, que gera uma rede wifi e uma p\u00e1gina Web para que os alunos possam conectar e controlalo em conjunto.","title":"Home"},{"location":"#robozito-2020","text":"Robozito Desmont\u00e1vel V25 by LBueno on Sketchfab O robozito \u00e9 um projeto que foi criado pelo aluno Wesley Gabriel em conjunto com os t\u00e9cnicos do Insper Fablab para uma atividade da Roadsec 2019 e agora \u00e9 utilizado como atividade complementar para os alunos de 1o semestre na disciplina de Natureza do Design. O robozito apresenta a maioria das suas pe\u00e7as fabricados com m\u00e1quinas dispon\u00edveis em qualquer Fablab, como: Laser: Corpo Bra\u00e7os Impress\u00e3o 3D: Rodas Suporte dos motores Fresadora de precis\u00e3o: Placa para conex\u00e3o com ESP8266 Seu controle \u00e9 feito por um ESP8266, que gera uma rede wifi e uma p\u00e1gina Web para que os alunos possam conectar e controlalo em conjunto.","title":"Robozito 2020"},{"location":"laser/","text":"Corte a Laser \u00b6 Os cortes s\u00e3o feitos usando uma m\u00e1quina de corte a laser e uma chapa de 300x300 mm. Arquivo DXF Caso queira fazer modifica\u00e7\u00f5es ao projeto, seguem alguns guidelines para gerar os arquivos para corte. M\u00e1quina Epilog Arquivo PDF : Linhas devem estar vetorizadas. Linhas de corte com 0,025mm de espessura. Cor de linha preta e sem desfoque ou opacidade. Gerar documento do tamanho do material que vai usar. DuploTech Arquivo DXF : Importar arquivos DXF para o RDWorks . Setar parametros de veloc\u00eddade e potencia para cada cor. Clicar em \"Salvar U file\" para exportar para o pendrive","title":"Corte \u00e0 Laser"},{"location":"laser/#corte-a-laser","text":"Os cortes s\u00e3o feitos usando uma m\u00e1quina de corte a laser e uma chapa de 300x300 mm. Arquivo DXF Caso queira fazer modifica\u00e7\u00f5es ao projeto, seguem alguns guidelines para gerar os arquivos para corte. M\u00e1quina Epilog Arquivo PDF : Linhas devem estar vetorizadas. Linhas de corte com 0,025mm de espessura. Cor de linha preta e sem desfoque ou opacidade. Gerar documento do tamanho do material que vai usar. DuploTech Arquivo DXF : Importar arquivos DXF para o RDWorks . Setar parametros de veloc\u00eddade e potencia para cada cor. Clicar em \"Salvar U file\" para exportar para o pendrive","title":"Corte a Laser"},{"location":"braco/3dPrint/","text":"Para a impress\u00e3o usaremos uma Ultimaker 2+ com bico de 0,4mm. Utilizamos o Ultimaker Cura para gerar os gcodes de nossas pe\u00e7as mas fique a vontade para utilizar o fatiador de sua preferencia. Recomendamos utilizar ABS com as configura\u00e7\u00f5es abaixo no seu Fatiador: # Ades\u00e3o brim_width = 2 //Dois perimetros de Brim # Suporte support_enable = True support_type = buildplate support_angle = 80 support_z_distance = 0.25 travel_avoid_supports = True # Camada & Preenchimento bottom_layers = 3 // 3 camadas de base top_layers = 3 // 3 camadas de topo infill_pattern = grid // Preenchimento em Grid infill_sparse_density = 20 // 20% de preenchimento # Velocidades skirt_brim_speed =15 speed_infill = 55 speed_layer_0 = 15 speed_print = 70 speed_support = 45 speed_topbottom = 50 speed_travel_layer_0 = 150 Use as imagens acima como guia para posicionar as pe\u00e7as na mesa de impress\u00e3o do Slicer.","title":"Impress\u00e3o 3D"},{"location":"braco/projeto2/","text":"bra\u00e7os do Robozito foram projetados para utilizarem dois pares de Servo Motores 9g, um par de Suportes para os motores e dois pares de bra\u00e7os cortados de MDF de 3mm . Motores e Suportes \u00b6 Utilizamos os Servo motores pela facilidade de controlar sua posi\u00e7\u00e3o visto que tem encoder dentro do seu corpo e s\u00e3o fortes o suficiente para conseguir levantar o Robozito do ch\u00e3o. Atrav\u00e9s da utiliza\u00e7\u00e3o do Suporte de motor Direito/Esquerdo impresso em 3D conseguimos realizar a fixa\u00e7\u00e3o dos motores \u00e0 90\u00b0 formando o que seriam os ombros , o que permite que sejam rotacionados os bra\u00e7os assim como baixa-lo e levanta-lo.","title":"Projetando os Bra\u00e7os"},{"location":"braco/projeto2/#motores-e-suportes","text":"Utilizamos os Servo motores pela facilidade de controlar sua posi\u00e7\u00e3o visto que tem encoder dentro do seu corpo e s\u00e3o fortes o suficiente para conseguir levantar o Robozito do ch\u00e3o. Atrav\u00e9s da utiliza\u00e7\u00e3o do Suporte de motor Direito/Esquerdo impresso em 3D conseguimos realizar a fixa\u00e7\u00e3o dos motores \u00e0 90\u00b0 formando o que seriam os ombros , o que permite que sejam rotacionados os bra\u00e7os assim como baixa-lo e levanta-lo.","title":"Motores e Suportes"},{"location":"braco/rodaApoio/","text":"As rodas e o apoio s\u00e3o montados por baixo do corpo do robozito e fixadas com parafusos M3x16mm e porcas M3, que podemos ver nas imagens. Montagem das rodas \u00b6 Adicionamos um rolamento MR126ZZ na Roda e a encaixamos no Suporte da Roda antes de inserirmos o Eixo da Roda , ap\u00f3s encaixar o eixo podemos colocar a porca no rebaixo interno. Recomendo instalar a porca com o robozito de ponta cabe\u00e7a para que a porca n\u00e3o caia Montagem do apoio frontal \u00b6 Para montar o apoio frontal somente precisamos inserir a porca M3 ap\u00f3s remover qualquer material que tenha sobrado da impress\u00e3o no recesso.","title":"Rodas e Apoio"},{"location":"braco/rodaApoio/#montagem-das-rodas","text":"Adicionamos um rolamento MR126ZZ na Roda e a encaixamos no Suporte da Roda antes de inserirmos o Eixo da Roda , ap\u00f3s encaixar o eixo podemos colocar a porca no rebaixo interno. Recomendo instalar a porca com o robozito de ponta cabe\u00e7a para que a porca n\u00e3o caia","title":"Montagem das rodas"},{"location":"braco/rodaApoio/#montagem-do-apoio-frontal","text":"Para montar o apoio frontal somente precisamos inserir a porca M3 ap\u00f3s remover qualquer material que tenha sobrado da impress\u00e3o no recesso.","title":"Montagem do apoio frontal"},{"location":"corpo/projeto1/","text":"O corpo do Robozito foi idealizado para que seja f\u00e1cil o acesso aos componentes, assim como mantenha organizados os cabos e conectores no seu interior. Ele foi pensado para ser cortado na laser utilizando MDF de 3mm empilhado para que chegue na altura necess\u00e1ria para os motores e placas, e preso por clips em forma de \"C\", o que facilita sua abertura para manuten\u00e7\u00e3o.","title":"Projetando o Corpo"},{"location":"eletronica/montagemEletronica/","text":"Antes de fazer a montagem da eletr\u00f4nica e fixar tudo no corpo do Robozito n\u00f3s recomendamos a montagem somente da eletr\u00f4nica em separado para que possamos testar os motores, cabos e placas em uma posi\u00e7\u00e3o em que seja f\u00e1cil fazer os testes caso sejam necess\u00e1rios. Cuidado com seu Servos 9g, as engrenagens dos motores mais baratos costumam ser de pl\u00e1stico e espanam f\u00e1cilmente caso fiquem travados ou exer\u00e7am muita for\u00e7a. Nunca tente for\u00e7a-los em uma posi\u00e7\u00e3o enquanto energizados Ap\u00f3s a montagem eletr\u00f4nica, fa\u00e7a a programa\u00e7\u00e3o da placa e veja se os motores se movimentam quando ela \u00e9 ligar. Depois acesse a rede da placa para testar os controles de cada motor.","title":"Montagem da Eletr\u00f4nica"},{"location":"eletronica/projeto3/","text":"Para fazer a conex\u00e3o dos motores, primeiramente tentamos utilizar somente cabos jumper macho-femea, o que se mostrou um problema visto que as conex\u00f5es n\u00e3o ficaram boas e geraram muito ruido, o que atrapalha o controle dos motores. Para fazer o projeto utilizamos o Eagle , um software da Autodesk que tem conex\u00e3o com o Fusion360, o que nos permite testar as placas diretamente no modelo virtual para checar as tolerancias e encaixes dentro do robozito. Tutorial Deixo um tutorial caso queira desenvolver sua pr\u00f3pria placa https://www.instructables.com/From-Idea-to-Reality-How-to-Design-Circuits-and-Cr/ A esquerda temos nosso esquem\u00e1tico e a direita nosso layout da placa no Eagle Caso queira alterar a Esquem\u00e1tico da placa ou o Layout original, seguem os arquivos abaixo para abrir no Eagle. Arquivos do Eagle Esquem\u00e1tico Layout","title":"Projetando a placa eletr\u00f4nica"},{"location":"eletronica/solda/","text":"Caso voc\u00ea v\u00e1 usar somente jumpers para fazer a conex\u00e3o do ESP com os motores, pode pular este cap\u00edtulo e partir para a montagem da eletr\u00f4nica . Para realizar a solda da nossa placa rec\u00e9m usinada iremos precisar de: Materiais & Equipamentos Esta\u00e7\u00e3o ou Ferro de solda Estanho Pasta para solda Estanho Lixa Fina (Gr\u00e3o 400) Barra de Pinos 4x2 Ap\u00f3s a usinagem da placa \u00e9 importante lixar levementa a superficie do cobre para tirar oxida\u00e7\u00f5es e poss\u00edveis rebarbas que podem ocasionar curtos em sua placa Tutorial de Solda Vale lembrar que a solda em PCBs usinadas \u00e9 um tanto mais dificil de ser realizada do que em uma PCB comercial devido a falta de mascara de solda Como soldar componentes eletronicos","title":"Solda"},{"location":"eletronica/usinagemPcb/","text":"Para a usingem da placa de circuito utilizamos uma fresadora de precis\u00e3o, no nosso caso uma Roland modelo MDX540, como mat\u00e9ria prima uma placa de fenolite de uma face, fresa trapezoidal de 30\u00ba para as trilhas e broca de 0,9mm para as fura\u00e7\u00f5es. O processo de usinagem remove o cobre da placa de fenolite utilizando a fresas e brocas para remover a conex\u00e3o entre a malha de cobre, gerando as conex\u00f5es do circuito desejado. Abaixo deixo os arquivos NC para que voc\u00ea possa usinar suas placas. Estes arquivos geram 36 placas (que cabem em um fenolite 100x100mm) Arquivos CNC Fura\u00e7\u00e3o com broca 0,9mm Usinagem das trilhas Corte do Contorno da Placa Caso esteja fazendo um projeto novo de placa precisamos exportar os gerbers da sua placa pelo Eagle para usarmos em um software de CAM que gerar\u00e1 os arquivos necess\u00e1rios para sua fresadora. Caso v\u00e1 mandar fabricar a sua placa externamente, ser\u00e3o pedidos os Gerbers da placa para fabrica\u00e7\u00e3o Tutorial Exporta\u00e7\u00e3o de Gerbers Exporta\u00e7\u00e3o Gerbers Ap\u00f3s a Exporta\u00e7\u00e3o iremos utilizar o FlatCAM , software opensource de edi\u00e7\u00e3o e cria\u00e7\u00e3o de C\u00f3digos G para usinagem em fresadoras CNC, para gerar nossos arquivos para a Fresadora. Caso queira s\u00f3 gerar um arquivo com menos placas seguem os gerbers originais abaixo, assim como um tutorial do FlatCAM. Gerbers Fura\u00e7\u00e3o Trilhas Corte Tutorial FlatCAM","title":"Usinagem de PCB"},{"location":"montagem/montagem/","text":"Montagem \u00b6 Ap\u00f3s fazer a montagem da eletr\u00f4nica para testar os componentes podemos come\u00e7ar a montagem final do Robozito. Para a montagem precisaremos de: Quantidade Componente M\u00e9todo de Fabrica\u00e7\u00e3o 3 Parafuso M3 x 16mm Comprar 3 Porca M3 Comprar 8 Parafuso M2 x 8mm Comprar 8 Porca M2 Comprar 1 Suporte Motor Esquerdo Impress\u00e3o 3D 1 Suporte Motor Direito Impress\u00e3o 3D 2 Rolamento MR 126 ZZ Comprar 2 Rodas Impress\u00e3o 3D 2 Suporte Roda Impress\u00e3o 3D 1 Apoio Frontal Impress\u00e3o 3D 4 Micro Servo 9g SG90 Comprar 1 Corpo Corte Laser 2 Abra\u00e7adeira Nylon 95x2,4mm Comprar 4 Jumper f\u00eamea-macho Comprar","title":"BOM"},{"location":"montagem/montagem/#montagem","text":"Ap\u00f3s fazer a montagem da eletr\u00f4nica para testar os componentes podemos come\u00e7ar a montagem final do Robozito. Para a montagem precisaremos de: Quantidade Componente M\u00e9todo de Fabrica\u00e7\u00e3o 3 Parafuso M3 x 16mm Comprar 3 Porca M3 Comprar 8 Parafuso M2 x 8mm Comprar 8 Porca M2 Comprar 1 Suporte Motor Esquerdo Impress\u00e3o 3D 1 Suporte Motor Direito Impress\u00e3o 3D 2 Rolamento MR 126 ZZ Comprar 2 Rodas Impress\u00e3o 3D 2 Suporte Roda Impress\u00e3o 3D 1 Apoio Frontal Impress\u00e3o 3D 4 Micro Servo 9g SG90 Comprar 1 Corpo Corte Laser 2 Abra\u00e7adeira Nylon 95x2,4mm Comprar 4 Jumper f\u00eamea-macho Comprar","title":"Montagem"},{"location":"programacao/configArduinoIDE/","text":"Download do Arduino IDE \u00b6 Primeiramente precisaremos baixar o Arduino IDE para que possamos fazer a programacao da placa ESP8266. V\u00e1 \u00e0 pagina do Arduino e selecione o seu sistema operacional para fazer a instala\u00e7\u00e3o do sistema corretamente. Por enquanto a vers\u00e3o web do Arduino IDE n\u00e3o suporta o ESP8266 Instala\u00e7\u00e3o do Arduino IDE \u00b6 Ap\u00f3s o download do instalador, prossiga com o processo de instala\u00e7\u00e3o normal para seu sistema operacional. Windows A diferen\u00e7a entre o arquivo .zip e o .exe \u00e9 que para rodar o programa \u00e0 partir do arquivo .zip precisamos abrir a pasta onde foi descompactado e clicar duas vezes no executavel. Para o arquivo .exe o instalador j\u00e1 deve criar atalhos para voc\u00ea no sistema. Arquivo .exe Para a instala\u00e7\u00e3o utilizando o arquivo .exe s\u00f3 precisamos fazer um click duplo no instalador e seguir o passo a passo das instru\u00e7\u00f5es do instalador. Arquivo .zip Para a instala\u00e7\u00e3o utilizando o arquivo .zip s\u00f3 precisamos selecionar onde ser\u00e3o extraidos os arquivos, realizar a extra\u00e7\u00e3o e ap\u00f3s finalizado abrir a pasta criada. Linux MacOS Configurando o Arduino IDE para o Robozito \u00b6 Tutorial baseado no tutorial da Usinainfo Configurando a IDE para o ESP8266 \u00b6 Para usar e programar ESP32 na IDE do Arduino, precisamos primeiro que ele reconhe\u00e7a os modelos da placa. Para isso, primeiramente devemos ir at\u00e9 as Prefer\u00eancias, Arquivo Prefer\u00eancias ou Ctrl + , , e colar a URL abaixo no campo de URLs adicionais: http://arduino.esp8266.com/stable/package_esp8266com_index.json Com isso, permitimos que a IDE acesse uma pequena \u201cbase de dados\u201d no formato .json que cont\u00e9m a configura\u00e7\u00e3o de in\u00fameras placas. Ap\u00f3s isso, devemos acessar o menu Ferramentas Placa Gerenciador de Placas . Nele, pesquise por esp8266 na caixa de pesquisa. Em seguida, instale a vers\u00e3o mais recente do driver que ir\u00e1 aparecer: esp8266 by ESP8266 Community , conforme ilustrado na figura a seguir: Feito isso, voc\u00ea deve selecionar a placa NodeMCU 0.9 (ESP-12 Module) , no menu de placas, para programar na ESP. Por fim, basta voc\u00ea selecionar a porta a qual a ESP est\u00e1 conectada e voc\u00ea estar\u00e1 pronto para enviar c\u00f3digos para ela! Instalando as bibliotecas \u00b6 Para realizar a instala\u00e7\u00e3o das bibliotecas necess\u00e1rias para nosso c\u00f3digo funcionar corretamente devemos ir em Ferramentas Gerenciador de Bibliotecas ou Ctrl + Shift + I As bibliotecas que temos que instalar s\u00e3o: \u00b6 ESP8266WiFi.h WebSockets PageBuilder Ap\u00f3s instaladas as bibliotecas podemos seguir para o c\u00f3digo do Robozito","title":"Configura\u00e7\u00e3o da Arduino IDE"},{"location":"programacao/configArduinoIDE/#download-do-arduino-ide","text":"Primeiramente precisaremos baixar o Arduino IDE para que possamos fazer a programacao da placa ESP8266. V\u00e1 \u00e0 pagina do Arduino e selecione o seu sistema operacional para fazer a instala\u00e7\u00e3o do sistema corretamente. Por enquanto a vers\u00e3o web do Arduino IDE n\u00e3o suporta o ESP8266","title":"Download do Arduino IDE"},{"location":"programacao/configArduinoIDE/#instalacao-do-arduino-ide","text":"Ap\u00f3s o download do instalador, prossiga com o processo de instala\u00e7\u00e3o normal para seu sistema operacional. Windows A diferen\u00e7a entre o arquivo .zip e o .exe \u00e9 que para rodar o programa \u00e0 partir do arquivo .zip precisamos abrir a pasta onde foi descompactado e clicar duas vezes no executavel. Para o arquivo .exe o instalador j\u00e1 deve criar atalhos para voc\u00ea no sistema. Arquivo .exe Para a instala\u00e7\u00e3o utilizando o arquivo .exe s\u00f3 precisamos fazer um click duplo no instalador e seguir o passo a passo das instru\u00e7\u00f5es do instalador. Arquivo .zip Para a instala\u00e7\u00e3o utilizando o arquivo .zip s\u00f3 precisamos selecionar onde ser\u00e3o extraidos os arquivos, realizar a extra\u00e7\u00e3o e ap\u00f3s finalizado abrir a pasta criada. Linux MacOS","title":"Instala\u00e7\u00e3o do Arduino IDE"},{"location":"programacao/configArduinoIDE/#configurando-o-arduino-ide-para-o-robozito","text":"Tutorial baseado no tutorial da Usinainfo","title":"Configurando o Arduino IDE para o Robozito"},{"location":"programacao/configArduinoIDE/#configurando-a-ide-para-o-esp8266","text":"Para usar e programar ESP32 na IDE do Arduino, precisamos primeiro que ele reconhe\u00e7a os modelos da placa. Para isso, primeiramente devemos ir at\u00e9 as Prefer\u00eancias, Arquivo Prefer\u00eancias ou Ctrl + , , e colar a URL abaixo no campo de URLs adicionais: http://arduino.esp8266.com/stable/package_esp8266com_index.json Com isso, permitimos que a IDE acesse uma pequena \u201cbase de dados\u201d no formato .json que cont\u00e9m a configura\u00e7\u00e3o de in\u00fameras placas. Ap\u00f3s isso, devemos acessar o menu Ferramentas Placa Gerenciador de Placas . Nele, pesquise por esp8266 na caixa de pesquisa. Em seguida, instale a vers\u00e3o mais recente do driver que ir\u00e1 aparecer: esp8266 by ESP8266 Community , conforme ilustrado na figura a seguir: Feito isso, voc\u00ea deve selecionar a placa NodeMCU 0.9 (ESP-12 Module) , no menu de placas, para programar na ESP. Por fim, basta voc\u00ea selecionar a porta a qual a ESP est\u00e1 conectada e voc\u00ea estar\u00e1 pronto para enviar c\u00f3digos para ela!","title":"Configurando a IDE para o ESP8266"},{"location":"programacao/configArduinoIDE/#instalando-as-bibliotecas","text":"Para realizar a instala\u00e7\u00e3o das bibliotecas necess\u00e1rias para nosso c\u00f3digo funcionar corretamente devemos ir em Ferramentas Gerenciador de Bibliotecas ou Ctrl + Shift + I","title":"Instalando as bibliotecas"},{"location":"programacao/configArduinoIDE/#as-bibliotecas-que-temos-que-instalar-sao","text":"ESP8266WiFi.h WebSockets PageBuilder Ap\u00f3s instaladas as bibliotecas podemos seguir para o c\u00f3digo do Robozito","title":"As bibliotecas que temos que instalar s\u00e3o:"},{"location":"programacao/gravandoESP/","text":"Ap\u00f3s copiar nosso c\u00f3digo para a ArduinoIDE e fazer a instala\u00e7\u00e3o das bibliotecas necess\u00e1rias para o funcionamento do nosso c\u00f3digo nos resta apenas conectar nossa placa via cabo USB, selecionar a porta em que ele foi plugado como vimos na parte da configura\u00e7\u00e3o e clicar no bot\u00e3o Carregar na parte superior ou usando o atalho Ctrl + U . Ap\u00f3s o carregamento do c\u00f3digo j\u00e1 estamos prontos para nos conectar e interagir com o Robozito acessando a rede WiFi gerada pelo ESP8266(com o nome que foi configurado no c\u00f3digo) e digitando no navegador o IP 192.168.4.1 . Caso n\u00e3o consiga a conex\u00e3o \u00e9 poss\u00edvel checar o IP atrav\u00e9s do monitor serial do ArduinoIDE com baud rate de 115200. para visualizar a informa\u00e7\u00e3o \u00e9 necess\u00e1rio resetar a placa com ela conectada no pc e com o monitor serial aberto.","title":"Gravando o c\u00f3digo na ESP8266"},{"location":"programacao/oCodigo/","text":"Explicando o C\u00f3digo em partes \u00b6 C\u00f3digo Completo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <Arduino.h> #include <ESP8266WiFi.h> #include <WebSocketsServer.h> #include <ESP8266WebServer.h> #include <ESP8266mDNS.h> #include <Hash.h> #include <Servo.h> // Include the library Servo servo1 ; // Create the Servo and name it \"servo1\" Servo servo2 ; // Create the Servo and name it \"servo2\" Servo servo3 ; // Create the Servo and name it \"servo3\" Servo servo4 ; // Create the Servo and name it \"servo4\" #define SERVO1 D0 #define SERVO2 D2 #define SERVO3 D3 #define SERVO4 D4 #define USE_SERIAL Serial ESP8266WebServer server ( 80 ); WebSocketsServer webSocket = WebSocketsServer ( 81 ); String website = \"<html><head><script>\" \"var connection = new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);\" \"connection.onopen = function(){ connection.send('Connected on ' + new Date()); };\" \"connection.onerror = function (error){ console.log('WebSocket Error ', error); };\" \"connection.onmessage = function(e){console.log('Server: ', e.data); };\" \"function sendValue(){\" \"var value = parseInt(document.getElementById('r').value).toString(16);\" \"if (value.length < 2){value = '0' + value;}\" \"color = document.getElementById('color').value;\" \"var command = '$' + color + value;\" \"console.log('Command: ' + command);\" \"connection.send(command);}</script></head>\" \"<body>LED Control:<br/><select id= \\\" color \\\" >\" \"<option value= \\\" R \\\" >Red</option><option value= \\\" G \\\" >Green</option><option value= \\\" B \\\" >Blue</option><option value= \\\" W \\\" >White</option>\" \"</select><br/><br/>Intensity: <br/> <input id= \\\" r \\\" type= \\\" range \\\" min= \\\" 0 \\\" max= \\\" 255 \\\" step= \\\" 1 \\\" oninput= \\\" sendValue(); \\\" /><br/></body></html>\" ; void webSocketEvent ( uint8_t num , WStype_t type , uint8_t * payload , size_t length ) { switch ( type ) { case WStype_DISCONNECTED : USE_SERIAL . printf ( \"[%u] Disconnected! \\n \" , num ); break ; case WStype_CONNECTED : { IPAddress ip = webSocket . remoteIP ( num ); USE_SERIAL . printf ( \"[%u] Connected from %d.%d.%d.%d url: %s \\n \" , num , ip [ 0 ], ip [ 1 ], ip [ 2 ], ip [ 3 ], payload ); // send message to client webSocket . sendTXT ( num , \"Connected\" ); } break ; case WStype_TEXT : USE_SERIAL . printf ( \"[%u] got Text: %s \\n \" , num , payload ); if ( payload [ 0 ] == '$' ) { // decode rgb data uint8_t value = ( uint8_t ) strtol (( const char * ) & payload [ 2 ], NULL , 16 ); USE_SERIAL . println ( value ); if ( payload [ 1 ] == 'R' ){ servo1 . write ( value ); } else if ( payload [ 1 ] == 'G' ){ servo2 . write ( value ); } else if ( payload [ 1 ] == 'B' ){ servo3 . write ( value ); } else if ( payload [ 1 ] == 'W' ){ servo4 . write ( value ); } } break ; } } void setup () { USE_SERIAL . begin ( 115200 ); //USE_SERIAL.setDebugOutput(true); USE_SERIAL . println (); USE_SERIAL . println (); USE_SERIAL . println (); for ( uint8_t t = 4 ; t > 0 ; t -- ) { USE_SERIAL . printf ( \"[SETUP] BOOT WAIT %d... \\n \" , t ); USE_SERIAL . flush (); delay ( 300 ); } servo1 . attach ( SERVO1 ); servo2 . attach ( SERVO2 ); servo3 . attach ( SERVO3 ); servo4 . attach ( SERVO4 ); servo1 . write ( 90 ); servo2 . write ( 90 ); servo3 . write ( 90 ); servo4 . write ( 90 ); WiFi . softAP ( \"nomeWiFi\" ); IPAddress myIP = WiFi . softAPIP (); Serial . print ( \"AP IP address: \" ); Serial . println ( myIP ); // start webSocket server webSocket . begin (); webSocket . onEvent ( webSocketEvent ); if ( MDNS . begin ( \"esp8266\" )) { USE_SERIAL . println ( \"MDNS responder started\" ); } // handle index server . on ( \"/\" , []() { // send index.html server . send ( 200 , \"text/html\" , website ); }); server . begin (); // Add service to MDNS MDNS . addService ( \"http\" , \"tcp\" , 80 ); MDNS . addService ( \"ws\" , \"tcp\" , 81 ); } void loop () { webSocket . loop (); server . handleClient (); } Importando as bibliotecas no c\u00f3digo \u00b6 1 2 3 4 5 6 7 8 #include <Arduino.h> #include <ESP8266WiFi.h> #include <WebSocketsServer.h> #include <ESP8266WebServer.h> #include <ESP8266mDNS.h> #include <Hash.h> #include <Servo.h> // Include the library Configurando e Nomeando os Servo Motores \u00b6 11 12 13 14 Servo servo1 ; // Create the Servo and name it \"servo1\" Servo servo2 ; // Create the Servo and name it \"servo2\" Servo servo3 ; // Create the Servo and name it \"servo3\" Servo servo4 ; // Create the Servo and name it \"servo4\" Definindo os pinos de controle de cada Servo Motor \u00b6 16 17 18 19 #define SERVO1 D0 #define SERVO2 D2 #define SERVO3 D3 #define SERVO4 D4 Seta uso de Comunica\u00e7\u00e3o Serial \u00b6 21 #define USE_SERIAL Serial Chamada para gerar o Web Server \u00b6 E define a porta que ser\u00e1 usada 23 24 ESP8266WebServer server ( 80 ); WebSocketsServer webSocket = WebSocketsServer ( 81 ); Template da p\u00e1gina Web Gerada \u00b6 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 String website = \"<html><head><script>\" \"var connection = new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);\" \"connection.onopen = function(){ connection.send('Connected on ' + new Date()); };\" \"connection.onerror = function (error){ console.log('WebSocket Error ', error); };\" \"connection.onmessage = function(e){console.log('Server: ', e.data); };\" \"function sendValue(){\" \"var value = parseInt(document.getElementById('r').value).toString(16);\" \"if (value.length < 2){value = '0' + value;}\" \"color = document.getElementById('color').value;\" \"var command = '$' + color + value;\" \"console.log('Command: ' + command);\" \"connection.send(command);}</script></head>\" \"<body>LED Control:<br/><select id= \\\" color \\\" >\" \"<option value= \\\" R \\\" >Red</option><option value= \\\" G \\\" >Green</option><option value= \\\" B \\\" >Blue</option><option value= \\\" W \\\" >White</option>\" \"</select><br/><br/>Intensity: <br/> <input id= \\\" r \\\" type= \\\" range \\\" min= \\\" 0 \\\" max= \\\" 255 \\\" step= \\\" 1 \\\" oninput= \\\" sendValue(); \\\" /><br/></body></html>\" ; Cria a fun\u00e7\u00e3o que trata os dados recebidos do celular \u00b6 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 void webSocketEvent ( uint8_t num , WStype_t type , uint8_t * payload , size_t length ) { switch ( type ) { case WStype_DISCONNECTED : USE_SERIAL . printf ( \"[%u] Disconnected! \\n \" , num ); break ; case WStype_CONNECTED : { IPAddress ip = webSocket . remoteIP ( num ); USE_SERIAL . printf ( \"[%u] Connected from %d.%d.%d.%d url: %s \\n \" , num , ip [ 0 ], ip [ 1 ], ip [ 2 ], ip [ 3 ], payload ); // send message to client webSocket . sendTXT ( num , \"Connected\" ); } break ; case WStype_TEXT : USE_SERIAL . printf ( \"[%u] got Text: %s \\n \" , num , payload ); if ( payload [ 0 ] == '$' ) { // decode rgb data uint8_t value = ( uint8_t ) strtol (( const char * ) & payload [ 2 ], NULL , 16 ); USE_SERIAL . println ( value ); if ( payload [ 1 ] == 'R' ){ servo1 . write ( value ); } else if ( payload [ 1 ] == 'G' ){ servo2 . write ( value ); } else if ( payload [ 1 ] == 'B' ){ servo3 . write ( value ); } else if ( payload [ 1 ] == 'W' ){ servo4 . write ( value ); } } break ; } } Inicializa a comunica\u00e7\u00e3o serial com baud rate de 115200 \u00b6 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 void setup () { USE_SERIAL . begin ( 115200 ); //USE_SERIAL.setDebugOutput(true); USE_SERIAL . println (); USE_SERIAL . println (); USE_SERIAL . println (); for ( uint8_t t = 4 ; t > 0 ; t -- ) { USE_SERIAL . printf ( \"[SETUP] BOOT WAIT %d... \\n \" , t ); USE_SERIAL . flush (); delay ( 300 ); } Inicializa os Servo Motores e posiciona eles em 90\u00b0 \u00b6 97 98 99 100 101 102 103 104 105 servo1 . attach ( SERVO1 ); servo2 . attach ( SERVO2 ); servo3 . attach ( SERVO3 ); servo4 . attach ( SERVO4 ); servo1 . write ( 90 ); servo2 . write ( 90 ); servo3 . write ( 90 ); servo4 . write ( 90 ); Define o nome da rede para \"nomeWiFi\" e o que ser\u00e1 feito no loop do WebSocket \u00b6 Caso queira alterar o nome da rede para n\u00e3o gerar conflito com outros robozitos, alterar a linha abaixo. 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 WiFi . softAP ( \"nomeWiFi\" ); IPAddress myIP = WiFi . softAPIP (); Serial . print ( \"AP IP address: \" ); Serial . println ( myIP ); // start webSocket server webSocket . begin (); webSocket . onEvent ( webSocketEvent ); if ( MDNS . begin ( \"esp8266\" )) { USE_SERIAL . println ( \"MDNS responder started\" ); } // handle index server . on ( \"/\" , []() { // send index.html server . send ( 200 , \"text/html\" , website ); }); server . begin (); // Add service to MDNS MDNS . addService ( \"http\" , \"tcp\" , 80 ); MDNS . addService ( \"ws\" , \"tcp\" , 81 ); } Inicia o Loop \u00b6 135 136 137 138 void loop () { webSocket . loop (); server . handleClient (); }","title":"C\u00f3digo"},{"location":"programacao/oCodigo/#explicando-o-codigo-em-partes","text":"C\u00f3digo Completo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include <Arduino.h> #include <ESP8266WiFi.h> #include <WebSocketsServer.h> #include <ESP8266WebServer.h> #include <ESP8266mDNS.h> #include <Hash.h> #include <Servo.h> // Include the library Servo servo1 ; // Create the Servo and name it \"servo1\" Servo servo2 ; // Create the Servo and name it \"servo2\" Servo servo3 ; // Create the Servo and name it \"servo3\" Servo servo4 ; // Create the Servo and name it \"servo4\" #define SERVO1 D0 #define SERVO2 D2 #define SERVO3 D3 #define SERVO4 D4 #define USE_SERIAL Serial ESP8266WebServer server ( 80 ); WebSocketsServer webSocket = WebSocketsServer ( 81 ); String website = \"<html><head><script>\" \"var connection = new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);\" \"connection.onopen = function(){ connection.send('Connected on ' + new Date()); };\" \"connection.onerror = function (error){ console.log('WebSocket Error ', error); };\" \"connection.onmessage = function(e){console.log('Server: ', e.data); };\" \"function sendValue(){\" \"var value = parseInt(document.getElementById('r').value).toString(16);\" \"if (value.length < 2){value = '0' + value;}\" \"color = document.getElementById('color').value;\" \"var command = '$' + color + value;\" \"console.log('Command: ' + command);\" \"connection.send(command);}</script></head>\" \"<body>LED Control:<br/><select id= \\\" color \\\" >\" \"<option value= \\\" R \\\" >Red</option><option value= \\\" G \\\" >Green</option><option value= \\\" B \\\" >Blue</option><option value= \\\" W \\\" >White</option>\" \"</select><br/><br/>Intensity: <br/> <input id= \\\" r \\\" type= \\\" range \\\" min= \\\" 0 \\\" max= \\\" 255 \\\" step= \\\" 1 \\\" oninput= \\\" sendValue(); \\\" /><br/></body></html>\" ; void webSocketEvent ( uint8_t num , WStype_t type , uint8_t * payload , size_t length ) { switch ( type ) { case WStype_DISCONNECTED : USE_SERIAL . printf ( \"[%u] Disconnected! \\n \" , num ); break ; case WStype_CONNECTED : { IPAddress ip = webSocket . remoteIP ( num ); USE_SERIAL . printf ( \"[%u] Connected from %d.%d.%d.%d url: %s \\n \" , num , ip [ 0 ], ip [ 1 ], ip [ 2 ], ip [ 3 ], payload ); // send message to client webSocket . sendTXT ( num , \"Connected\" ); } break ; case WStype_TEXT : USE_SERIAL . printf ( \"[%u] got Text: %s \\n \" , num , payload ); if ( payload [ 0 ] == '$' ) { // decode rgb data uint8_t value = ( uint8_t ) strtol (( const char * ) & payload [ 2 ], NULL , 16 ); USE_SERIAL . println ( value ); if ( payload [ 1 ] == 'R' ){ servo1 . write ( value ); } else if ( payload [ 1 ] == 'G' ){ servo2 . write ( value ); } else if ( payload [ 1 ] == 'B' ){ servo3 . write ( value ); } else if ( payload [ 1 ] == 'W' ){ servo4 . write ( value ); } } break ; } } void setup () { USE_SERIAL . begin ( 115200 ); //USE_SERIAL.setDebugOutput(true); USE_SERIAL . println (); USE_SERIAL . println (); USE_SERIAL . println (); for ( uint8_t t = 4 ; t > 0 ; t -- ) { USE_SERIAL . printf ( \"[SETUP] BOOT WAIT %d... \\n \" , t ); USE_SERIAL . flush (); delay ( 300 ); } servo1 . attach ( SERVO1 ); servo2 . attach ( SERVO2 ); servo3 . attach ( SERVO3 ); servo4 . attach ( SERVO4 ); servo1 . write ( 90 ); servo2 . write ( 90 ); servo3 . write ( 90 ); servo4 . write ( 90 ); WiFi . softAP ( \"nomeWiFi\" ); IPAddress myIP = WiFi . softAPIP (); Serial . print ( \"AP IP address: \" ); Serial . println ( myIP ); // start webSocket server webSocket . begin (); webSocket . onEvent ( webSocketEvent ); if ( MDNS . begin ( \"esp8266\" )) { USE_SERIAL . println ( \"MDNS responder started\" ); } // handle index server . on ( \"/\" , []() { // send index.html server . send ( 200 , \"text/html\" , website ); }); server . begin (); // Add service to MDNS MDNS . addService ( \"http\" , \"tcp\" , 80 ); MDNS . addService ( \"ws\" , \"tcp\" , 81 ); } void loop () { webSocket . loop (); server . handleClient (); }","title":"Explicando o C\u00f3digo em partes"},{"location":"programacao/oCodigo/#importando-as-bibliotecas-no-codigo","text":"1 2 3 4 5 6 7 8 #include <Arduino.h> #include <ESP8266WiFi.h> #include <WebSocketsServer.h> #include <ESP8266WebServer.h> #include <ESP8266mDNS.h> #include <Hash.h> #include <Servo.h> // Include the library","title":"Importando as bibliotecas no c\u00f3digo"},{"location":"programacao/oCodigo/#configurando-e-nomeando-os-servo-motores","text":"11 12 13 14 Servo servo1 ; // Create the Servo and name it \"servo1\" Servo servo2 ; // Create the Servo and name it \"servo2\" Servo servo3 ; // Create the Servo and name it \"servo3\" Servo servo4 ; // Create the Servo and name it \"servo4\"","title":"Configurando e Nomeando os Servo Motores"},{"location":"programacao/oCodigo/#definindo-os-pinos-de-controle-de-cada-servo-motor","text":"16 17 18 19 #define SERVO1 D0 #define SERVO2 D2 #define SERVO3 D3 #define SERVO4 D4","title":"Definindo os pinos de controle de cada Servo Motor"},{"location":"programacao/oCodigo/#seta-uso-de-comunicacao-serial","text":"21 #define USE_SERIAL Serial","title":"Seta uso de Comunica\u00e7\u00e3o Serial"},{"location":"programacao/oCodigo/#chamada-para-gerar-o-web-server","text":"E define a porta que ser\u00e1 usada 23 24 ESP8266WebServer server ( 80 ); WebSocketsServer webSocket = WebSocketsServer ( 81 );","title":"Chamada para gerar o Web Server"},{"location":"programacao/oCodigo/#template-da-pagina-web-gerada","text":"26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 String website = \"<html><head><script>\" \"var connection = new WebSocket('ws://' + location.hostname + ':81/', ['arduino']);\" \"connection.onopen = function(){ connection.send('Connected on ' + new Date()); };\" \"connection.onerror = function (error){ console.log('WebSocket Error ', error); };\" \"connection.onmessage = function(e){console.log('Server: ', e.data); };\" \"function sendValue(){\" \"var value = parseInt(document.getElementById('r').value).toString(16);\" \"if (value.length < 2){value = '0' + value;}\" \"color = document.getElementById('color').value;\" \"var command = '$' + color + value;\" \"console.log('Command: ' + command);\" \"connection.send(command);}</script></head>\" \"<body>LED Control:<br/><select id= \\\" color \\\" >\" \"<option value= \\\" R \\\" >Red</option><option value= \\\" G \\\" >Green</option><option value= \\\" B \\\" >Blue</option><option value= \\\" W \\\" >White</option>\" \"</select><br/><br/>Intensity: <br/> <input id= \\\" r \\\" type= \\\" range \\\" min= \\\" 0 \\\" max= \\\" 255 \\\" step= \\\" 1 \\\" oninput= \\\" sendValue(); \\\" /><br/></body></html>\" ;","title":"Template da p\u00e1gina Web Gerada"},{"location":"programacao/oCodigo/#cria-a-funcao-que-trata-os-dados-recebidos-do-celular","text":"42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 void webSocketEvent ( uint8_t num , WStype_t type , uint8_t * payload , size_t length ) { switch ( type ) { case WStype_DISCONNECTED : USE_SERIAL . printf ( \"[%u] Disconnected! \\n \" , num ); break ; case WStype_CONNECTED : { IPAddress ip = webSocket . remoteIP ( num ); USE_SERIAL . printf ( \"[%u] Connected from %d.%d.%d.%d url: %s \\n \" , num , ip [ 0 ], ip [ 1 ], ip [ 2 ], ip [ 3 ], payload ); // send message to client webSocket . sendTXT ( num , \"Connected\" ); } break ; case WStype_TEXT : USE_SERIAL . printf ( \"[%u] got Text: %s \\n \" , num , payload ); if ( payload [ 0 ] == '$' ) { // decode rgb data uint8_t value = ( uint8_t ) strtol (( const char * ) & payload [ 2 ], NULL , 16 ); USE_SERIAL . println ( value ); if ( payload [ 1 ] == 'R' ){ servo1 . write ( value ); } else if ( payload [ 1 ] == 'G' ){ servo2 . write ( value ); } else if ( payload [ 1 ] == 'B' ){ servo3 . write ( value ); } else if ( payload [ 1 ] == 'W' ){ servo4 . write ( value ); } } break ; } }","title":"Cria a fun\u00e7\u00e3o que trata os dados recebidos do celular"},{"location":"programacao/oCodigo/#inicializa-a-comunicacao-serial-com-baud-rate-de-115200","text":"81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 void setup () { USE_SERIAL . begin ( 115200 ); //USE_SERIAL.setDebugOutput(true); USE_SERIAL . println (); USE_SERIAL . println (); USE_SERIAL . println (); for ( uint8_t t = 4 ; t > 0 ; t -- ) { USE_SERIAL . printf ( \"[SETUP] BOOT WAIT %d... \\n \" , t ); USE_SERIAL . flush (); delay ( 300 ); }","title":"Inicializa a comunica\u00e7\u00e3o serial com baud rate de 115200"},{"location":"programacao/oCodigo/#inicializa-os-servo-motores-e-posiciona-eles-em-90","text":"97 98 99 100 101 102 103 104 105 servo1 . attach ( SERVO1 ); servo2 . attach ( SERVO2 ); servo3 . attach ( SERVO3 ); servo4 . attach ( SERVO4 ); servo1 . write ( 90 ); servo2 . write ( 90 ); servo3 . write ( 90 ); servo4 . write ( 90 );","title":"Inicializa os Servo Motores e posiciona eles em 90\u00b0"},{"location":"programacao/oCodigo/#define-o-nome-da-rede-para-nomewifi-e-o-que-sera-feito-no-loop-do-websocket","text":"Caso queira alterar o nome da rede para n\u00e3o gerar conflito com outros robozitos, alterar a linha abaixo. 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 WiFi . softAP ( \"nomeWiFi\" ); IPAddress myIP = WiFi . softAPIP (); Serial . print ( \"AP IP address: \" ); Serial . println ( myIP ); // start webSocket server webSocket . begin (); webSocket . onEvent ( webSocketEvent ); if ( MDNS . begin ( \"esp8266\" )) { USE_SERIAL . println ( \"MDNS responder started\" ); } // handle index server . on ( \"/\" , []() { // send index.html server . send ( 200 , \"text/html\" , website ); }); server . begin (); // Add service to MDNS MDNS . addService ( \"http\" , \"tcp\" , 80 ); MDNS . addService ( \"ws\" , \"tcp\" , 81 ); }","title":"Define o nome da rede para \"nomeWiFi\" e o que ser\u00e1 feito no loop do WebSocket"},{"location":"programacao/oCodigo/#inicia-o-loop","text":"135 136 137 138 void loop () { webSocket . loop (); server . handleClient (); }","title":"Inicia o Loop"}]}